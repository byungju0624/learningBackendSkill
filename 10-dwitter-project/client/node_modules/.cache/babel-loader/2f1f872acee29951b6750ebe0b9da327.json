{"ast":null,"code":"export default class TweetService {\n  constructor() {\n    this.baseURL = \"http://localhost:8080\";\n  }\n\n  async getTweets(username) {\n    console.log(this.baseURL);\n    const query = username ? `?username=${username}` : \"\";\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text,\n        username: \"ellie\",\n        name: \"ellie\"\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/jeongbyeongju/Desktop/learning_back_end_skill/10-dwitter-project/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","getTweets","username","console","log","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,uBAAf;AACD;;AACc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,OAAjB;AACA,UAAMK,KAAK,GAAGH,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,UAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKP,OAAQ,UAASK,KAAM,EAAhC,EAAmC;AAC7DG,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFoD,KAAnC,CAA5B;AAIA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKP,OAAQ,SAAjB,EAA2B;AACrDQ,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF4C;AAGrDQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA,IAAF;AAAQd,QAAAA,QAAQ,EAAE,OAAlB;AAA2BkB,QAAAA,IAAI,EAAE;AAAjC,OAAf;AAH+C,KAA3B,CAA5B;AAKA,UAAMV,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXW,WAAW,CAACC,OAAD,EAAU;AACzB,UAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKP,OAAQ,WAAUsB,OAAQ,EAAnC,EAAsC;AAChEd,MAAAA,MAAM,EAAE,QADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFuD,KAAtC,CAA5B;;AAKA,QAAIH,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,EAAN;AACD;AACF;;AAEgB,QAAXU,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKP,OAAQ,WAAUsB,OAAQ,EAAnC,EAAsC;AAChEd,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuD;AAGhEQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA;AAAF,OAAf;AAH0D,KAAtC,CAA5B;AAKA,UAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AArD+B","sourcesContent":["export default class TweetService {\n  constructor() {\n    this.baseURL = \"http://localhost:8080\";\n  }\n  async getTweets(username) {\n    console.log(this.baseURL);\n    const query = username ? `?username=${username}` : \"\";\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text, username: \"ellie\", name: \"ellie\" }),\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}